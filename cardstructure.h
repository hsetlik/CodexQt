#ifndef CARDSTRUCTURE_H
#define CARDSTRUCTURE_H

#include "datastructures.h"
#include <QtWidgets>

enum class CardType
{
    NTA,
    Cloze,
    Audio,
    Full
};

struct Card
{
    Card(PhrasePair* parent, CardType type) :
        parentPair(parent),
        cardType(type)
    {

    }
    virtual ~Card() {}
    PhrasePair* const parentPair;
    const CardType cardType;
    //pure virtual functions to be generated by the card subclasses
    virtual std::string getFrontData() = 0;
    virtual std::string getBackData() =0;
    //gives JSON object
    virtual QJsonObject getJson()=0;
};

struct NtaCard : public Card
{
public:
    NtaCard(std::string native, std::string target, PhrasePair* parent);
    std::string getFrontData() override {return nativeWord; }
    std::string getBackData() override {return targetWord; }
    QJsonObject getJson() override;
private:
    std::string nativeWord;
    std::string targetWord;
};

struct ClozeCard : public Card
{
public:
    ClozeCard(std::string toRemove, PhrasePair* parent);
    std::string getFrontData() override {return clozeSentence; }
    std::string getBackData() override {return answer; }
    QJsonObject getJson() override;
private:
    std::string clozeSentence;
    std::string answer;
};

struct FullCard : public Card
{
public:
    FullCard(PhrasePair* parent);
    std::string getFrontData() override {return question; }
    std::string getBackData() override {return answer; }
    QJsonObject getJson() override;
private:
    std::string question;
    std::string answer;
};

struct PhrasePairCards : public PhrasePairListener
{
    PhrasePairCards(PhrasePair* pair);
    PhrasePair* const linkedPair;
    QJsonObject getAsJson();
    void updateCards();
    void phraseChanged(PhrasePair* changed) override;
    //some comment
private:
    std::vector<NtaCard> ntaCards;
    std::vector<ClozeCard> clozeCards;
};






#endif // CARDSTRUCTURE_H
