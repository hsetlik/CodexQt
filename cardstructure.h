#ifndef CARDSTRUCTURE_H
#define CARDSTRUCTURE_H

#include "datastructures.h"
#include <QtWidgets>

enum class CardType
{
    NTA,
    Cloze,
    Audio,
    Full
};

struct Card
{
    Card(PhrasePair* parent, CardType type) :
        parentPair(parent),
        cardType(type)
    {
        dateNextDue = QDateTime::currentDateTime();
    }
    virtual ~Card() {}
    PhrasePair* const parentPair;
    const CardType cardType;
    //pure virtual functions to be generated by the card subclasses
    virtual std::string getFrontData() = 0;
    virtual std::string getBackData() =0;
    //gives JSON object
    virtual QJsonObject getJson()=0;
    void setDueIn(int numDays)
    {
        dateNextDue = dateNextDue.addDays(numDays);
    }
    bool isDue(QDateTime current)
    {
        return current >= dateNextDue;
    }
protected:
    QDateTime dateNextDue;
};

struct NtaCard : public Card
{
public:
    NtaCard(std::string native, std::string target, PhrasePair* parent);
    NtaCard(QJsonObject& obj, PhrasePair* parent);
    std::string getFrontData() override {return nativeWord; }
    std::string getBackData() override {return targetWord; }
    QJsonObject getJson() override;
private:
    std::string nativeWord;
    std::string targetWord;
};

struct ClozeCard : public Card
{
public:
    ClozeCard(std::string toRemove, PhrasePair* parent);
    ClozeCard(QJsonObject& obj, PhrasePair* parent);
    std::string getFrontData() override {return clozeSentence; }
    std::string getBackData() override {return answer; }
    QJsonObject getJson() override;
private:
    std::string clozeSentence;
    std::string answer;
};

struct FullCard : public Card
{
public:
    FullCard(PhrasePair* parent);
    FullCard(QJsonObject& obj, PhrasePair* parent);
    std::string getFrontData() override {return question; }
    std::string getBackData() override {return answer; }
    QJsonObject getJson() override;
private:
    std::string question;
    std::string answer;
};

struct PhrasePairCards
{
    PhrasePairCards(PhrasePair* parent);
    PhrasePair* const linkedPair;
    std::vector<NtaCard> ntaCards;
    std::vector<ClozeCard> clozeCards;
    FullCard* full;
private:
    //adds all the cards to an external array for storing a deck of multiple phrase pairs
    void appendToDeckArray(QJsonArray& array);
    QJsonArray getNtaJsons();
    QJsonArray getClozeJsons();
};
//==============================================================
class Deck
{
public:
    Deck(std::string name = "default_deck");
    std::vector<PhrasePairCards> phrasePairs;
    std::vector<Card> allCards;
    std::vector<Card> dueToday();
private:
    std::string deckName;
};

#endif // CARDSTRUCTURE_H
